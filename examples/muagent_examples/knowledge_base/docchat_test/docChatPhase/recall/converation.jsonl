{
  "messages": [
    {
      "chat_index": "docchat_test",
      "role_name": "human",
      "role_type": "user",
      "role_prompt": "",
      "input_query": "langchain有哪些模块",
      "role_content": "langchain有哪些模块",
      "step_content": "",
      "parsed_output": {},
      "spec_parsed_output": {},
      "parsed_output_list": [],
      "task": null,
      "db_docs": [
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "入门文档\n\n模块\nLangChain 提供了对几个主要模块的支持。\n针对每个模块，我们提供一些入门示例、指南、参考文档和概念指南。\n这些模块按照逐渐增加的复杂性排列如下：\n\n模型（models）\n: LangChain 支持的各种模型类型和模型集成。\n\n提示（prompts）\n: 包括提示管理、提示优化和提示序列化。\n\n内存（memory）\n: 内存是在链/代理调用之间保持状态的概念。LangChain 提供了一个标准的内存接口、一组内存实现及使用内存的链/代理示例。\n\n索引（indexes）\n: 与您自己的文本数据结合使用时，语言模型往往更加强大——此模块涵盖了执行此操作的最佳实践。\n\n链（chains）\n: 链不仅仅是单个 LLM 调用，还包括一系列调用（无论是调用 LLM 还是不同的实用工具）。LangChain 提供了一种标准的链接口、许多与其他工具的集成。LangChain 提供了用于常见应用程序的端到端的链调用。",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 0
        },
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "构建语言模型应用程序: LLM\n现在我们已经安装了 LangChain 并设置了我们的环境，我们可以开始构建我们的语言模型应用程序了。\nLangChain 提供了许多可用于构建语言模型应用程序的模块。\n模块可以组合起来创建更复杂的应用程序，或者单独用于简单的应用程序。\nLLM: 从语言模型中获取预测\nLangChain 最基本的构建块是对某些输入调用 LLM。\n让我们来看一个简单的例子。\n我们假设我们正在构建一个基于公司产品生成公司名称的服务。\n为此，我们首先需要导入 LLM 包装器。\n\n```code\nfrom langchain.llms import OpenAI\n```\n\nLLM初始化和调用\n然后我们可以用任何参数初始化包装器。\n在这个例子中，我们可能希望输出更加随机，所以我们将以温度（temperature）初始化它。\n\n```code\nllm = OpenAI(temperature=0.9)\n```\n\n我们现在可以根据一些输入调用它！",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 1
        },
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "快速入门指南开始\n\n快速入门指南\n本教程将简要介绍如何使用 LangChain 构建端到端语言模型应用程序。\n安装\n首先，使用以下命令安装 LangChain:\n\n```code\npip install langchain\n# or\nconda install langchain -c conda-forge\n```\n\n环境设定\n使用 LangChain 通常需要与一个或多个模型提供程序、数据存储、 API 等集成。\n对于这个例子，我们将使用 OpenAI 的 API，所以我们首先需要安装他们的 SDK:\n\n```code\npip install openai\n```\n\n然后我们需要在终端设置环境变量。\n\n```code\nexport OPENAI_API_KEY=\"...\"\n```\n\n或者，你可以在 Jupiter 教程(或 Python 脚本)内部完成:\n\n```code\nimport os\nos.environ[\"OPENAI_API_KEY\"] = \"...\"\n```",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 2
        }
      ],
      "code_docs": [],
      "search_docs": [],
      "customed_kargs": {},
      "phase_name": null,
      "chain_name": null
    },
    {
      "chat_index": "docchat_test",
      "role_name": "docChatPhase",
      "role_type": "assistant",
      "role_prompt": "",
      "input_query": "langchain有哪些模块",
      "role_content": "**Action Status:** Continued\n**Answer:** LangChain提供了对模型（models）、提示（prompts）、内存（memory）、索引（indexes）、链（chains）等几个主要模块的支持。每个模块都有入门示例、指南、参考文档和概念指南。",
      "step_content": "**Action Status:** Continued\n**Answer:** LangChain提供了对模型（models）、提示（prompts）、内存（memory）、索引（indexes）、链（chains）等几个主要模块的支持。每个模块都有入门示例、指南、参考文档和概念指南。",
      "parsed_output": {
        "Action Status": "Continued",
        "Answer": "LangChain提供了对模型（models）、提示（prompts）、内存（memory）、索引（indexes）、链（chains）等几个主要模块的支持。每个模块都有入门示例、指南、参考文档和概念指南。"
      },
      "spec_parsed_output": {
        "Action Status": "Continued",
        "Answer": "LangChain提供了对模型（models）、提示（prompts）、内存（memory）、索引（indexes）、链（chains）等几个主要模块的支持。每个模块都有入门示例、指南、参考文档和概念指南。"
      },
      "parsed_output_list": [
        {
          "Action Status": "Continued",
          "Answer": "LangChain提供了对模型（models）、提示（prompts）、内存（memory）、索引（indexes）、链（chains）等几个主要模块的支持。每个模块都有入门示例、指南、参考文档和概念指南。"
        }
      ],
      "task": null,
      "db_docs": [
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "入门文档\n\n模块\nLangChain 提供了对几个主要模块的支持。\n针对每个模块，我们提供一些入门示例、指南、参考文档和概念指南。\n这些模块按照逐渐增加的复杂性排列如下：\n\n模型（models）\n: LangChain 支持的各种模型类型和模型集成。\n\n提示（prompts）\n: 包括提示管理、提示优化和提示序列化。\n\n内存（memory）\n: 内存是在链/代理调用之间保持状态的概念。LangChain 提供了一个标准的内存接口、一组内存实现及使用内存的链/代理示例。\n\n索引（indexes）\n: 与您自己的文本数据结合使用时，语言模型往往更加强大——此模块涵盖了执行此操作的最佳实践。\n\n链（chains）\n: 链不仅仅是单个 LLM 调用，还包括一系列调用（无论是调用 LLM 还是不同的实用工具）。LangChain 提供了一种标准的链接口、许多与其他工具的集成。LangChain 提供了用于常见应用程序的端到端的链调用。",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 0
        },
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "构建语言模型应用程序: LLM\n现在我们已经安装了 LangChain 并设置了我们的环境，我们可以开始构建我们的语言模型应用程序了。\nLangChain 提供了许多可用于构建语言模型应用程序的模块。\n模块可以组合起来创建更复杂的应用程序，或者单独用于简单的应用程序。\nLLM: 从语言模型中获取预测\nLangChain 最基本的构建块是对某些输入调用 LLM。\n让我们来看一个简单的例子。\n我们假设我们正在构建一个基于公司产品生成公司名称的服务。\n为此，我们首先需要导入 LLM 包装器。\n\n```code\nfrom langchain.llms import OpenAI\n```\n\nLLM初始化和调用\n然后我们可以用任何参数初始化包装器。\n在这个例子中，我们可能希望输出更加随机，所以我们将以温度（temperature）初始化它。\n\n```code\nllm = OpenAI(temperature=0.9)\n```\n\n我们现在可以根据一些输入调用它！",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 1
        },
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "快速入门指南开始\n\n快速入门指南\n本教程将简要介绍如何使用 LangChain 构建端到端语言模型应用程序。\n安装\n首先，使用以下命令安装 LangChain:\n\n```code\npip install langchain\n# or\nconda install langchain -c conda-forge\n```\n\n环境设定\n使用 LangChain 通常需要与一个或多个模型提供程序、数据存储、 API 等集成。\n对于这个例子，我们将使用 OpenAI 的 API，所以我们首先需要安装他们的 SDK:\n\n```code\npip install openai\n```\n\n然后我们需要在终端设置环境变量。\n\n```code\nexport OPENAI_API_KEY=\"...\"\n```\n\n或者，你可以在 Jupiter 教程(或 Python 脚本)内部完成:\n\n```code\nimport os\nos.environ[\"OPENAI_API_KEY\"] = \"...\"\n```",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 2
        }
      ],
      "code_docs": [],
      "search_docs": [],
      "customed_kargs": {
        "code_content": null,
        "tool_params": {}
      },
      "phase_name": null,
      "chain_name": null
    },
    {
      "chat_index": "docchat_test",
      "role_name": "human",
      "role_type": "user",
      "role_prompt": "",
      "input_query": "提示（prompts）有什么用？",
      "role_content": "提示（prompts）有什么用？",
      "step_content": "",
      "parsed_output": {},
      "spec_parsed_output": {},
      "parsed_output_list": [],
      "task": null,
      "db_docs": [
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "Begin! Remember to speak as a pirate when giving your final answer. Use lots of \"Arg\"s\n\nQuestion: {input}\n{agent_scratchpad}\"\"\"\n\n```\n\n自定义提示模板现在具有一个\n```code\ntools_getter\n```\n的概念，我们对输入调用它以选择要使用的工具。\n\n```code\nfrom typing import Callable\n# Set up a prompt template\nclass CustomPromptTemplate(StringPromptTemplate):\n# The template to use\ntemplate: str\n############## NEW ######################\n# The list of tools available\ntools_getter: Callable",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 0
        },
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "内存: 向链和代理添加状态\n到目前为止，我们经历过的所有工具和代理都是无状态的的。\n但是通常，您可能希望链或代理具有某种“内存”概念，以便它可以记住关于其以前的交互的信息。\n最简单明了的例子就是在设计一个聊天机器人时——你想让它记住之前的消息，这样它就可以利用这些消息的上下文来进行更好的对话。\n这是一种“短期记忆”。在更复杂的一面，你可以想象一个链条/代理随着时间的推移记住关键信息——这将是一种形式的“长期记忆”。关于后者的更多具体想法，请参阅这篇令人敬畏的论文。 (opens in a new tab)\nLangChain 提供了几个专门为此目的创建的链。 本教程使用其中一个链(\n\n```code\nConversationChain\n```\n\n) 和两种不同类型的内存来完成操作。\n默认情况下，,\n\n```code\nConversationChain\n```\n\n有一个简单的内存类型，它记住所有以前的输入/输出，并将它们添加到传递的上下文中。\n让我们看一下如何使用这个链(设置\n```code\nverbose=True\n```\n，这样我们就可以看到提示符)。",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 1
        },
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "Begin! Remember to speak as a pirate when giving your final answer. Use lots of \"Args\"\n\nQuestion: {input}\n{agent_scratchpad}\n\n```\n\n请注意，我们能够为代理提供自定义的提示模板，即不限于由\n```code\ncreate_prompt\n```\n函数生成的提示，假设它满足代理的要求。\n例如，对于 ZeroShotAgent ，我们需要确保它满足以下要求。\n应该有一个以“Action：”开头的字符串和一个以“Action Input：”开头的字符串，并且两者都应该用换行符分隔。\n\n```code\nllm_chain = LLMChain(llm=OpenAI(temperature=0), prompt=prompt)\n```",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 2
        }
      ],
      "code_docs": [],
      "search_docs": [],
      "customed_kargs": {},
      "phase_name": null,
      "chain_name": null
    },
    {
      "chat_index": "docchat_test",
      "role_name": "qaer",
      "role_type": "assistant",
      "role_prompt": "",
      "input_query": "提示（prompts）有什么用？",
      "role_content": "**Origin Query:** langchain有哪些模块\n**Context:** LangChain提供了对模型（models）、提示（prompts）、内存（memory）、索引（indexes）、链（chains）等几个主要模块的支持。每个模块都有入门示例、指南、参考文档和概念指南.\n\n**Action Status:** Continued\n**Answer:** LangChain提供了对模型（models）、提示（prompts）、内存（memory）、索引（indexes）、链（chains）等几个主要模块的支持。每个模块都有入门示例、指南、参考文档和概念指南.",
      "step_content": "**Origin Query:** langchain有哪些模块\n**Context:** LangChain提供了对模型（models）、提示（prompts）、内存（memory）、索引（indexes）、链（chains）等几个主要模块的支持。每个模块都有入门示例、指南、参考文档和概念指南.\n\n**Action Status:** Continued\n**Answer:** LangChain提供了对模型（models）、提示（prompts）、内存（memory）、索引（indexes）、链（chains）等几个主要模块的支持。每个模块都有入门示例、指南、参考文档和概念指南.",
      "parsed_output": {
        "Origin Query": "langchain有哪些模块",
        "Context": "LangChain提供了对模型（models）、提示（prompts）、内存（memory）、索引（indexes）、链（chains）等几个主要模块的支持。每个模块都有入门示例、指南、参考文档和概念指南.",
        "Action Status": "Continued",
        "Answer": "LangChain提供了对模型（models）、提示（prompts）、内存（memory）、索引（indexes）、链（chains）等几个主要模块的支持。每个模块都有入门示例、指南、参考文档和概念指南."
      },
      "spec_parsed_output": {
        "Origin Query": "langchain有哪些模块",
        "Context": "LangChain提供了对模型（models）、提示（prompts）、内存（memory）、索引（indexes）、链（chains）等几个主要模块的支持。每个模块都有入门示例、指南、参考文档和概念指南.",
        "Action Status": "Continued",
        "Answer": "LangChain提供了对模型（models）、提示（prompts）、内存（memory）、索引（indexes）、链（chains）等几个主要模块的支持。每个模块都有入门示例、指南、参考文档和概念指南."
      },
      "parsed_output_list": [
        {
          "Origin Query": "langchain有哪些模块",
          "Context": "LangChain提供了对模型（models）、提示（prompts）、内存（memory）、索引（indexes）、链（chains）等几个主要模块的支持。每个模块都有入门示例、指南、参考文档和概念指南.",
          "Action Status": "Continued",
          "Answer": "LangChain提供了对模型（models）、提示（prompts）、内存（memory）、索引（indexes）、链（chains）等几个主要模块的支持。每个模块都有入门示例、指南、参考文档和概念指南."
        }
      ],
      "task": null,
      "db_docs": [
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "Begin! Remember to speak as a pirate when giving your final answer. Use lots of \"Arg\"s\n\nQuestion: {input}\n{agent_scratchpad}\"\"\"\n\n```\n\n自定义提示模板现在具有一个\n```code\ntools_getter\n```\n的概念，我们对输入调用它以选择要使用的工具。\n\n```code\nfrom typing import Callable\n# Set up a prompt template\nclass CustomPromptTemplate(StringPromptTemplate):\n# The template to use\ntemplate: str\n############## NEW ######################\n# The list of tools available\ntools_getter: Callable",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 0
        },
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "内存: 向链和代理添加状态\n到目前为止，我们经历过的所有工具和代理都是无状态的的。\n但是通常，您可能希望链或代理具有某种“内存”概念，以便它可以记住关于其以前的交互的信息。\n最简单明了的例子就是在设计一个聊天机器人时——你想让它记住之前的消息，这样它就可以利用这些消息的上下文来进行更好的对话。\n这是一种“短期记忆”。在更复杂的一面，你可以想象一个链条/代理随着时间的推移记住关键信息——这将是一种形式的“长期记忆”。关于后者的更多具体想法，请参阅这篇令人敬畏的论文。 (opens in a new tab)\nLangChain 提供了几个专门为此目的创建的链。 本教程使用其中一个链(\n\n```code\nConversationChain\n```\n\n) 和两种不同类型的内存来完成操作。\n默认情况下，,\n\n```code\nConversationChain\n```\n\n有一个简单的内存类型，它记住所有以前的输入/输出，并将它们添加到传递的上下文中。\n让我们看一下如何使用这个链(设置\n```code\nverbose=True\n```\n，这样我们就可以看到提示符)。",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 1
        },
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "Begin! Remember to speak as a pirate when giving your final answer. Use lots of \"Args\"\n\nQuestion: {input}\n{agent_scratchpad}\n\n```\n\n请注意，我们能够为代理提供自定义的提示模板，即不限于由\n```code\ncreate_prompt\n```\n函数生成的提示，假设它满足代理的要求。\n例如，对于 ZeroShotAgent ，我们需要确保它满足以下要求。\n应该有一个以“Action：”开头的字符串和一个以“Action Input：”开头的字符串，并且两者都应该用换行符分隔。\n\n```code\nllm_chain = LLMChain(llm=OpenAI(temperature=0), prompt=prompt)\n```",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 2
        }
      ],
      "code_docs": [],
      "search_docs": [],
      "customed_kargs": {
        "code_content": null,
        "tool_params": {}
      },
      "phase_name": null,
      "chain_name": null
    }
  ]
}