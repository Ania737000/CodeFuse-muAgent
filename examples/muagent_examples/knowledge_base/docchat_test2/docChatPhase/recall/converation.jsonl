{
  "messages": [
    {
      "chat_index": "docchat_test2",
      "role_name": "human",
      "role_type": "user",
      "role_prompt": "",
      "input_query": "提示（prompts）有什么用？",
      "role_content": "提示（prompts）有什么用？",
      "step_content": "",
      "parsed_output": {},
      "spec_parsed_output": {},
      "parsed_output_list": [],
      "task": null,
      "db_docs": [
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "Begin! Remember to speak as a pirate when giving your final answer. Use lots of \"Arg\"s\n\nQuestion: {input}\n{agent_scratchpad}\"\"\"\n\n```\n\n自定义提示模板现在具有一个\n```code\ntools_getter\n```\n的概念，我们对输入调用它以选择要使用的工具。\n\n```code\nfrom typing import Callable\n# Set up a prompt template\nclass CustomPromptTemplate(StringPromptTemplate):\n# The template to use\ntemplate: str\n############## NEW ######################\n# The list of tools available\ntools_getter: Callable",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 0
        },
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "内存: 向链和代理添加状态\n到目前为止，我们经历过的所有工具和代理都是无状态的的。\n但是通常，您可能希望链或代理具有某种“内存”概念，以便它可以记住关于其以前的交互的信息。\n最简单明了的例子就是在设计一个聊天机器人时——你想让它记住之前的消息，这样它就可以利用这些消息的上下文来进行更好的对话。\n这是一种“短期记忆”。在更复杂的一面，你可以想象一个链条/代理随着时间的推移记住关键信息——这将是一种形式的“长期记忆”。关于后者的更多具体想法，请参阅这篇令人敬畏的论文。 (opens in a new tab)\nLangChain 提供了几个专门为此目的创建的链。 本教程使用其中一个链(\n\n```code\nConversationChain\n```\n\n) 和两种不同类型的内存来完成操作。\n默认情况下，,\n\n```code\nConversationChain\n```\n\n有一个简单的内存类型，它记住所有以前的输入/输出，并将它们添加到传递的上下文中。\n让我们看一下如何使用这个链(设置\n```code\nverbose=True\n```\n，这样我们就可以看到提示符)。",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 1
        },
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "Begin! Remember to speak as a pirate when giving your final answer. Use lots of \"Args\"\n\nQuestion: {input}\n{agent_scratchpad}\n\n```\n\n请注意，我们能够为代理提供自定义的提示模板，即不限于由\n```code\ncreate_prompt\n```\n函数生成的提示，假设它满足代理的要求。\n例如，对于 ZeroShotAgent ，我们需要确保它满足以下要求。\n应该有一个以“Action：”开头的字符串和一个以“Action Input：”开头的字符串，并且两者都应该用换行符分隔。\n\n```code\nllm_chain = LLMChain(llm=OpenAI(temperature=0), prompt=prompt)\n```",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 2
        }
      ],
      "code_docs": [],
      "search_docs": [],
      "customed_kargs": {},
      "phase_name": null,
      "chain_name": null
    },
    {
      "chat_index": "docchat_test2",
      "role_name": "qaer",
      "role_type": "assistant",
      "role_prompt": "",
      "input_query": "提示（prompts）有什么用？",
      "role_content": "\n```\n\n**Origin Query:** What are the uses of prompts?\n**Context:** The user is asking about the uses of prompts.\n**DocInfos:** N/A\n\n**Action Status:** Continued\n**Answer:** Prompts are used to guide the conversation and provide a starting point for the agent to generate a response. They help to steer the conversation in a specific direction and provide context for the agent to understand the user's query.\n```",
      "step_content": "\n```\n\n**Origin Query:** What are the uses of prompts?\n**Context:** The user is asking about the uses of prompts.\n**DocInfos:** N/A\n\n**Action Status:** Continued\n**Answer:** Prompts are used to guide the conversation and provide a starting point for the agent to generate a response. They help to steer the conversation in a specific direction and provide context for the agent to understand the user's query.\n```",
      "parsed_output": {
        "Origin Query": "What are the uses of prompts?",
        "Context": "The user is asking about the uses of prompts.",
        "DocInfos": "N/A",
        "Action Status": "Continued",
        "Answer": "Prompts are used to guide the conversation and provide a starting point for the agent to generate a response. They help to steer the conversation in a specific direction and provide context for the agent to understand the user's query.\n```"
      },
      "spec_parsed_output": {
        "Origin Query": "What are the uses of prompts?",
        "Context": "The user is asking about the uses of prompts.",
        "DocInfos": "N/A",
        "Action Status": "Continued",
        "Answer": "Prompts are used to guide the conversation and provide a starting point for the agent to generate a response. They help to steer the conversation in a specific direction and provide context for the agent to understand the user's query.\n```"
      },
      "parsed_output_list": [
        {
          "Origin Query": "What are the uses of prompts?",
          "Context": "The user is asking about the uses of prompts.",
          "DocInfos": "N/A",
          "Action Status": "Continued",
          "Answer": "Prompts are used to guide the conversation and provide a starting point for the agent to generate a response. They help to steer the conversation in a specific direction and provide context for the agent to understand the user's query.\n```"
        }
      ],
      "task": null,
      "db_docs": [
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "Begin! Remember to speak as a pirate when giving your final answer. Use lots of \"Arg\"s\n\nQuestion: {input}\n{agent_scratchpad}\"\"\"\n\n```\n\n自定义提示模板现在具有一个\n```code\ntools_getter\n```\n的概念，我们对输入调用它以选择要使用的工具。\n\n```code\nfrom typing import Callable\n# Set up a prompt template\nclass CustomPromptTemplate(StringPromptTemplate):\n# The template to use\ntemplate: str\n############## NEW ######################\n# The list of tools available\ntools_getter: Callable",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 0
        },
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "内存: 向链和代理添加状态\n到目前为止，我们经历过的所有工具和代理都是无状态的的。\n但是通常，您可能希望链或代理具有某种“内存”概念，以便它可以记住关于其以前的交互的信息。\n最简单明了的例子就是在设计一个聊天机器人时——你想让它记住之前的消息，这样它就可以利用这些消息的上下文来进行更好的对话。\n这是一种“短期记忆”。在更复杂的一面，你可以想象一个链条/代理随着时间的推移记住关键信息——这将是一种形式的“长期记忆”。关于后者的更多具体想法，请参阅这篇令人敬畏的论文。 (opens in a new tab)\nLangChain 提供了几个专门为此目的创建的链。 本教程使用其中一个链(\n\n```code\nConversationChain\n```\n\n) 和两种不同类型的内存来完成操作。\n默认情况下，,\n\n```code\nConversationChain\n```\n\n有一个简单的内存类型，它记住所有以前的输入/输出，并将它们添加到传递的上下文中。\n让我们看一下如何使用这个链(设置\n```code\nverbose=True\n```\n，这样我们就可以看到提示符)。",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 1
        },
        {
          "title": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "snippet": "Begin! Remember to speak as a pirate when giving your final answer. Use lots of \"Args\"\n\nQuestion: {input}\n{agent_scratchpad}\n\n```\n\n请注意，我们能够为代理提供自定义的提示模板，即不限于由\n```code\ncreate_prompt\n```\n函数生成的提示，假设它满足代理的要求。\n例如，对于 ZeroShotAgent ，我们需要确保它满足以下要求。\n应该有一个以“Action：”开头的字符串和一个以“Action Input：”开头的字符串，并且两者都应该用换行符分隔。\n\n```code\nllm_chain = LLMChain(llm=OpenAI(temperature=0), prompt=prompt)\n```",
          "link": "D:\\project\\gitlab\\llm\\external\\ant_code\\muagent\\examples\\muagent_examples\\knowledge_base\\example_test\\content\\langchain_text_10.jsonl",
          "index": 2
        }
      ],
      "code_docs": [],
      "search_docs": [],
      "customed_kargs": {
        "code_content": null,
        "tool_params": {}
      },
      "phase_name": null,
      "chain_name": null
    }
  ]
}